tail.diffs <- numeric(n.max - n.min + 1)
cvs <- numeric(n.max - n.min + 1)
for(i in seq_len(n.max - n.min + 1)){
exact.null <- nullCIDist(ns[i],1,cumulative = 1, force_sym = 1)
critical.val <- which.min(abs(exact.null - 0.05)) # alpha = 0.05 one sided
cvs[i] <- critical.val
pars <- computeExpectedApproximation(ns[i])
# exact.null is 0 based, so we subtract 1
tail.diffs[i] <- pnorm(critical.val - 1, mean = pars[1], sd = pars[2]) - exact.null[critical.val]
}
tail.diffs
plot(ns, tail.diffs)
tail.diffs <- numeric(n.max - n.min + 1)
cvs <- numeric(n.max - n.min + 1)
for(i in seq_len(n.max - n.min + 1)){
exact.null <- nullCIDist(ns[i],1,cumulative = 1, force_sym = 1)
critical.val <- which.min(abs(exact.null - 0.05)) # alpha = 0.05 one sided
cvs[i] <- critical.val
pars <- computeExpectedApproximation(ns[i])
# exact.null is 0 based, so we subtract 1 to get actual number of inversions
tail.diffs[i] <- pnorm(critical.val , mean = pars[1], sd = pars[2]) - exact.null[critical.val]
}
plot(ns, tail.diffs)
tail.diffs <- numeric(n.max - n.min + 1)
cvs <- numeric(n.max - n.min + 1)
for(i in seq_len(n.max - n.min + 1)){
exact.null <- nullCIDist(ns[i],1,cumulative = 1, force_sym = 1)
critical.val <- which.min(abs(exact.null - 0.025)) # alpha = 0.05 one sided
cvs[i] <- critical.val
pars <- computeExpectedApproximation(ns[i])
# exact.null is 0 based, so we subtract 1 to get actual number of inversions
tail.diffs[i] <- pnorm(critical.val x- 1, mean = pars[1], sd = pars[2]) - exact.null[critical.val]
}
tail.diffs <- numeric(n.max - n.min + 1)
cvs <- numeric(n.max - n.min + 1)
for(i in seq_len(n.max - n.min + 1)){
exact.null <- nullCIDist(ns[i],1,cumulative = 1, force_sym = 1)
critical.val <- which.min(abs(exact.null - 0.025)) # alpha = 0.05 one sided
cvs[i] <- critical.val
pars <- computeExpectedApproximation(ns[i])
# exact.null is 0 based, so we subtract 1 to get actual number of inversions
tail.diffs[i] <- pnorm(critical.val x- 1, mean = pars[1], sd = pars[2]) - exact.null[critical.val]
}
tail.diffs <- numeric(n.max - n.min + 1)
cvs <- numeric(n.max - n.min + 1)
for(i in seq_len(n.max - n.min + 1)){
exact.null <- nullCIDist(ns[i],1,cumulative = 1, force_sym = 1)
critical.val <- which.min(abs(exact.null - 0.025)) # alpha = 0.05 one sided
cvs[i] <- critical.val
pars <- computeExpectedApproximation(ns[i])
# exact.null is 0 based, so we subtract 1 to get actual number of inversions
tail.diffs[i] <- pnorm(critical.val - 1, mean = pars[1], sd = pars[2]) - exact.null[critical.val]
}
plot(ns, tail.diffs)
tail.diffs <- numeric(n.max - n.min + 1)
cvs <- numeric(n.max - n.min + 1)
for(i in seq_len(n.max - n.min + 1)){
exact.null <- nullCIDist(ns[i],1,cumulative = 1, force_sym = 1)
critical.val <- which.min(abs(exact.null - 0.025)) # alpha = 0.05 two sided
cvs[i] <- critical.val
pars <- computeExpectedApproximation(ns[i])
# exact.null is 0 based, so we subtract 1 to get actual number of inversions
tail.diffs[i] <- pnorm(critical.val, mean = pars[1], sd = pars[2]) - exact.null[critical.val]
}
plot(ns, tail.diffs)
length(1:100)
length(0:100)
seq(1, 100)
tail.diffs(51)
null.dist <- nullCIDist(100)
pars <- computeExpectedApproximation(100)
for(i in 1:51){
tail.diffs[i] <- pnorm(i, mean = pars[1], sd = pars[2]) - null.dist[i]
}
tail.diffs <- numeric(n.max - n.min + 1)
cvs <- numeric(n.max - n.min + 1)
for(i in seq_len(n.max - n.min + 1)){
exact.null <- nullCIDist(ns[i],1,cumulative = 1, force_sym = 1)
critical.val <- which.min(abs(exact.null - 0.025)) # alpha = 0.05 two sided
cvs[i] <- critical.val
pars <- computeExpectedApproximation(ns[i])
# exact.null is 0 based, so we subtract 1 to get actual number of inversions
tail.diffs[i] <- pnorm(critical.val, mean = pars[1], sd = pars[2]) - exact.null[critical.val]
}
plot(ns, tail.diffs)
tail.diffs <- numeric(51)
null.dist <- nullCIDist(100)
pars <- computeExpectedApproximation(100)
for(i in 1:51){
tail.diffs[i] <- pnorm(i, mean = pars[1], sd = pars[2]) - null.dist[i]
}
plot(1:51, tail.diffs)
for(i in 1:51){
tail.diffs[i] <- pnorm(i -1 , mean = pars[1], sd = pars[2]) - null.dist[i]
}
plot(1:51, tail.diffs)
pnorm(0, pars[1], pars[2])
pnorm(0, pars[1], pars[2]) - nulldist[0]
pnorm(0, pars[1], pars[2]) - null.dist[0]
pnorm(0, pars[1], pars[2]) - null.dist[1]
null.dist[1]
pars <- computeExpectedApproximation(100)
pars
pnorm(0, pars[1], pars[2]) - null.dist[1]
choose(100,2)
choose(100,2)/2
tail.diffs <- numeric(choose(100,2)/2))
null.dist <- nullCIDist(100)
pars <- computeExpectedApproximation(100)
tail.diffs <- numeric(choose(100,2)/2)
null.dist <- nullCIDist(100)
pars <- computeExpectedApproximation(100)
for(i in 1:(choose(100,2)/2)){
tail.diffs[i] <- pnorm(i - 1, mean = pars[1], sd = pars[2]) - null.dist[i]
}
plot(1:(choose(100,2)/2), tail.diffs)
tail.diffs <- numeric(choose(100,2)/2)
null.dist <- nullCIDist(100)
pars <- computeExpectedApproximation(100)
for(i in 1:(choose(100,2)/2)){
tail.diffs[i] <- pnorm(i , mean = pars[1], sd = pars[2]) - null.dist[i]
}
plot(1:(choose(100,2)/2), tail.diffs)
for(i in 1:(choose(100,2)/2)){
tail.diffs[i] <- pnorm(i - 1, mean = pars[1], sd = pars[2]) - null.dist[i]
}
plot(1:(choose(100,2)/2), tail.diffs)
for(i in 1:(choose(100,2)/2)){
tail.diffs[i] <- pnorm(i , mean = pars[1], sd = pars[2]) - null.dist[i]
}
plot(1:(choose(100,2)/2), tail.diffs)
tail.diffs <- numeric(n.max - n.min + 1)
cvs <- numeric(n.max - n.min + 1)
for(i in seq_len(n.max - n.min + 1)){
exact.null <- nullCIDist(ns[i],1,cumulative = 1, force_sym = 1)
critical.val <- which.min(abs(exact.null - 0.025)) # alpha = 0.05 two sided
cvs[i] <- critical.val
pars <- computeExpectedApproximation(ns[i])
# exact.null is 0 based, so we subtract 1 to get actual number of inversions
tail.diffs[i] <- pnorm(critical.val, mean = pars[1], sd = pars[2]) - exact.null[critical.val]
}
plot(ns, tail.diffs)
tail.diffs
tail.diffs <- numeric(choose(100,2)/2)
null.dist <- nullCIDist(100)
pars <- computeExpectedApproximation(100)
for(i in 1:(choose(100,2)/2)){
tail.diffs[i] <- pnorm(i , mean = pars[1], sd = pars[2]) - null.dist[i]
}
plot(1:(choose(100,2)/2), tail.diffs)
tail.diffs
tail.diffs <- numeric(choose(100,2)/2)
null.dist <- nullCIDist(100)
pars <- computeExpectedApproximation(100)
for(i in 1:(choose(100,2)/2)){
tail.diffs[i] <- pnorm(i -1, mean = pars[1], sd = pars[2]) - null.dist[i]
}
plot(1:(choose(100,2)/2), tail.diffs)
tail.diffs[1:10]
mean(tail.diffs)
null.dist <- nullCIDist(100)
pars <- computeExpectedApproximation(100)
for(i in 1:(choose(100,2)/2)){
tail.diffs[i] <- pnorm(i , mean = pars[1], sd = pars[2]) - null.dist[i]
}
plot(1:(choose(100,2)/2), tail.diffs)
observations <- 1:!0
observations <- 1:10
predictions <- 1:10
discordant <- numeric(length(predictions))
pairs <- rep(length(predictions)-1, length(predictions))
output_observations <- observations
output_predictions <- predictions
output_discordant <- discordant
output_pairs <- pairs
output_observations
tracemem(observations)
tracemem(output_observations)
?.C
dyn.load("~/Code/fastCI/fastCI.so")
.C("merge_sort_c", as.double(observations),
as.double(predictions),
as.double(discordant),
as.double(pairs),
as.double(output_observations),
as.double(output_predictions),
as.double(output_discordant),
as.double(output_pairs), as.integer(length(observations)), as.integer(outx))
outx <- TRUE
.C("merge_sort_c", as.double(observations),
as.double(predictions),
as.double(discordant),
as.double(pairs),
as.double(output_observations),
as.double(output_predictions),
as.double(output_discordant),
as.double(output_pairs), as.integer(length(observations)), as.integer(outx))
source("~/Code/fastCI/computeNullCI.R")
library(memoise)
nullCIDist <- memoise(nullCIDist)
source("~/Code/fastCI/computeNullCI.R")
library(memoise)
nullCIDist <- memoise(nullCIDist)
makeTableUpToN <- function(N){
res <- list()
for(i in seq_len(N)){
res[[i]] <- nullCIDist(N)
}
return(res)
}
makeTableUpToN(100)
tbl <- makeTableUpToN(100)
tbl
tbl[1]
tbl[0]
tbl[[1]]
str(tbl)
nullCIDist <- unmemoise(nullCIDist)
source("~/Code/fastCI/computeNullCI.R")
makeTableUpToN <- function(N){
res <- list()
for(i in seq_len(N)){
res[[i]] <- nullCIDist(N)
}
return(res)
}
nullCIDist <- unmemoise(nullCIDist)
tbl <- makeTableUpToN(100)
tbl[[1]]
library(memoise)
nullCIDist <- unmemoise(nullCIDist)
makeTableUpToN <- function(N){
res <- list()
for(i in seq_len(N)){
res[[i]] <- nullCIDist(i)
}
return(res)
}
tbl <- makeTableUpToN(100)
tbl[1]
tbl[2]
tbl[3]
makeTableUpToN <- function(N){
res <- list()
for(i in seq_len(N)){
res[[i]] <- nullCIDist(i, multvect = 1, force_sym = TRUE)
}
return(res)
}
tbl[3]
tbl[100]
tbl
dyn.load("~/Code/fastCI/fastCI.so")
system.time(for (i in 1:1000) fastCI(rnorm(100), rnorm(100)))
system.time(for (i in 1:1000) fastCI(rnorm(100), rnorm(100)))
source('~/Code/fastCI/fastCI.R')
system.time(for (i in 1:1000) fastCI(rnorm(100), rnorm(100)))
system.time(for (i in 1:1000) fastCI(rnorm(100), rnorm(100)))
system.time(for (i in 1:1000) fastCI(rnorm(100), rnorm(100)))
system.time(for (i in 1:1000) fastCI(rnorm(100), rnorm(100)))
system.time(for (i in 1:1000) fastCI(rnorm(100), rnorm(100)))
system.time(for (i in 1:1000) fastCI(rnorm(100), rnorm(100)))
system.time(for (i in 1:1000) fastCI(rnorm(100), rnorm(100)))
system.time(for (i in 1:1000) fastCI(rnorm(100), rnorm(100)))
system.time(for (i in 1:1000) fastCI(rnorm(100), rnorm(100)))
system.time(for (i in 1:1000) Hmisc::rcorr.cens(rnorm(100), rnorm(100)))
system.time(for (i in 1:1000) Hmisc::rcorr.cens(rnorm(100), rnorm(100)))
system.time(for (i in 1:1000) Hmisc::rcorr.cens(rnorm(100), rnorm(100)))
system.time(for (i in 1:1000) Hmisc::rcorr.cens(rnorm(100), rnorm(100)))
system.time(for (i in 1:1000) Hmisc::rcorr.cens(rnorm(100), rnorm(100)))
system.time(for (i in 1:1000) Hmisc::rcorr.cens(rnorm(100), rnorm(100)))
i
justFastCI <- function(observations, predictions, outx = TRUE, noise.ties = FALSE, noise.eps = sqrt(.Machine$double.eps), C = TRUE, CPP = TRUE){
if(!length(observations) == length(predictions)){
stop("Size of vectors must be the same")
}
myCompleteCases <- complete.cases(observations, predictions)
observations <- observations[myCompleteCases]
predictions <- predictions[myCompleteCases]
myorder <- order(predictions, method = "radix")
predictions <- predictions[myorder]
observations <- observations[myorder]
if(noise.ties){
dup.pred <- duplicated(predictions)
dup.obs <- duplicated(observations)
## Being extra-precautious about possible duplicates from rnorm. (VERY UNLIKELY)
while(any(dup.obs) || any(dup.pred)){
predictions[dup.pred] <- predictions[dup.pred] + rnorm(sum(dup.pred), 0, noise.eps)
observations[dup.obs] <- observations[dup.obs] + rnorm(sum(dup.obs), 0, noise.eps)
dup.pred <- duplicated(predictions)
dup.obs <- duplicated(observations)
}
}
if(C){
discordant <- numeric(length(predictions))
pairs <- rep(length(predictions)-1, length(predictions))
# output_observations <- observations
# output_predictions <- predictions
# output_discordant <- discordant
# output_pairs <- pairs
# cres <- .C("merge_sort_c", as.double(observations),
#                    as.double(predictions),
#                    as.double(discordant),
#                    as.double(pairs),
#                    as.double(output_observations),
#                    as.double(output_predictions),
#                    as.double(output_discordant),
#                    as.double(output_pairs), as.integer(length(observations)), as.integer(outx))
# output <- cres[5:8]
output <- .Call("merge_sort_c", observations,
predictions,
discordant,
pairs,
length(observations), outx)
} else {
if(CPP){
output <- merge_sort_c(observations, predictions, numeric(length(predictions)), rep(length(predictions)-1, length(predictions)), outx)
} else{
input <- list(observations, predictions, numeric(length(predictions)), rep(length(predictions)-1, length(predictions)))
output <- merge_sort(input, outx)
}
}
output_discordant <- output[[3]]
output_pairs <- output[[4]]
N <- length(predictions)
D <- sum(output_discordant)
Cvec <- output_pairs-output_discordant
C <-  sum(Cvec)
cindex <- C/(C+D)
return(cindex)
}
system.time(for (i in 1:1000) justFastCI(rnorm(100), rnorm(100)))
system.time(for (i in 1:1000) justFastCI(rnorm(100), rnorm(100)))
system.time(for (i in 1:1000) justFastCI(rnorm(100), rnorm(100)))
system.time(for (i in 1:1000) fastCI(rnorm(100), rnorm(100)))
system.time(for (i in 1:1000) fastCI(rnorm(100), rnorm(100)))
system.time(for (i in 1:1000) fastCI(rnorm(100), rnorm(100)))
source('~/Code/fastCI/fastCI.R')
system.time(for (i in 1:1000) justFastCI(rnorm(100), rnorm(100)))
system.time(for (i in 1:1000) justFastCI(rnorm(100), rnorm(100)))
system.time(for (i in 1:1000) justFastCI(rnorm(100), rnorm(100)))
system.time(for (i in 1:1000) justFastCI(rnorm(100), rnorm(100)))
system.time(for (i in 1:1000) justFastCI(rnorm(100), rnorm(100)))
system.time(for (i in 1:1000) justFastCI(rnorm(100), rnorm(100)))
system.time(for (i in 1:1000) justFastCI(rnorm(100), rnorm(100)))
system.time(for (i in 1:1000) Hmisc::rcorr.cens(rnorm(100), rnorm(100)))
system.time(for (i in 1:1000) Hmisc::rcorr.cens(rnorm(100), rnorm(100)))
setwd("/Volumes/Untitled/airways_reads/")
samples <- read.table(file.path(dir,"samples.csv"), header=TRUE)
dir
?dir
mydir <- getwd()
samples <- read.table(file.path(mydir,"samples.csv"), header=TRUE)
samples
samples <- read.csv(file.path(mydir,"samples.csv"), header=TRUE)
samples
samples <- read.csv(file.path(mydir,"samples.csv"), header=TRUE)
samples
files <- file.path(dir, "output", samples$SampleName, "abundance.tsv")
files <- file.path(mydir, "output", samples$SampleName, "abundance.tsv")
samples <- read.csv(file.path(mydir,"samples.csv"), header=TRUE)
samples
files <- file.path(mydir, "output", samples$SampleName, "abundance.tsv")
names(files) <- samples$SampleName
all(file.exists(files))
library(AnnotationDbi)
library(GenomicFeatures)
txdb <- makeTxDbFromGFF("kallisto-45/transcriptome/gencode.v29.annotation.gtf.gz")
save(txdb, file="kallisto-45/transcriptome/gencode.v29.annotation.txdb.RData")
txdb <- load("kallisto-45/transcriptome/gencode.v29.annotation.txdb.RData")
k <- keys(txdb, keytype="TXNAME")
load("kallisto-45/transcriptome/gencode.v29.annotation.txdb.RData")
k <- keys(txdb, keytype="TXNAME")
txdb
load("kallisto-45/transcriptome/gencode.v29.annotation.txdb.RData")
txdb
?TxDb
txdb <- makeTxDbFromGFF("kallisto-45/transcriptome/gencode.v29.annotation.gtf.gz")
saveDb(txdb, file="kallisto-45/transcriptome/gencode.v29.annotation.txdb")
loadDb("kallisto-45/transcriptome/gencode.v29.annotation.txdb")
txdb <- loadDb("kallisto-45/transcriptome/gencode.v29.annotation.txdb")
txdb
k <- keys(txdb, keytype="TXNAME")
tx2gene <- select(txdb, k, "GENEID", "TXNAME")
files
library("tximport")
library("jsonlite")
library("readr")
txi <- tximport(files, type="kallisto", tx2gene=tx2gene)
txi <- tximport(files, type="kallisto", tx2gene=tx2gene, ignoreAfterBar = TRUE)
names(txi)
txi$counts[1:3,1:3]
txi$length[1:3,1:3]
txi$abundance[1:3,1:3]
txi$countsFromAbundance
library("DESeq2")
?DESeqDataSet
?design()
?design
?DESeqDataSetFromTximport
library("DESeq2")
dds <- DESeqDataSetFromTximport(txi, colData = samples, design = ~1)
airway <- DESeqDataSetFromTximport(txi, colData = samples, design = ~1)
airway$dex <- relevel(airway$dex, "untrt")
airway$dex
round( colSums(assay(airway)) / 1e6, 1 )
colData(airway)
table(airway$cell)
table(airway$dex)
library("DESeq2")
dds <- DESeqDataSetFromTximport(txi, colData = samples, design = ~1)
dds$dex <- relevel(dds$dex, "untrt")
dds$dex
round( colSums(assay(dds)) / 1e6, 1 )
colData(dds)
table(dds$cell)
table(dds$dex)
keep <- rowSums(counts(dds) >= 5) >= 4
table(keep)
dds <- dds[keep,]
boxplot(log10(counts(dds)+1))
dds <- estimateSizeFactors(dds)
boxplot(log10(counts(dds,normalized=TRUE)+1))
vsd <- vst(dds)
class(vsd)
assay(vsd)[1:3,1:3]
plotPCA(vsd, "dex")
library("ggplot2")
pcaData <- plotPCA(vsd, intgroup = c( "dex", "cell"), returnData = TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(x = PC1, y = PC2, color = dex, shape = cell)) +
geom_point(size =3) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed()
dds <- DESeqDataSet(dds, design = ~ cell + dex)
dds <- DESeq(dds)
res <- results(dds)
head(res[order(res$pvalue),])
plotCounts(dds, which.min(res$pvalue), "dex")
plotMA(res, ylim=c(-5,5))
library("apeglm")
install("apeglm")
library(BiocManager)
library("apeglm")
install("apeglm")
library("apeglm")
resultsNames(dds)
res2 <- lfcShrink(dds, coef="dex_trt_vs_untrt", type="apeglm")
par(mfrow=c(1,2))
plotMA(res, ylim=c(-3,3), main="No shrinkage")
plotMA(res2, ylim=c(-3,3), main="apeglm")
par(mfrow=c(1,2))
plotMA(res.lfc, ylim=c(-5,5), main="No shrinkage, LFC test")
res.lfc <- results(dds, lfcThreshold=1)
res.lfc2 <- lfcShrink(dds, coef="dex_trt_vs_untrt", type="apeglm",
lfcThreshold=1)
par(mfrow=c(1,2))
plotMA(res.lfc, ylim=c(-5,5), main="No shrinkage, LFC test")
plotMA(res.lfc2, ylim=c(-5,5), main="apeglm, LFC test", alpha=0.01)
library("AnnotationHub")
ah <- AnnotationHub()
query(ah, c("OrgDb","Homo sapiens"))
hs <- ah[["AH61777"]]
hs <- ah[["AH66156"]]
hs
columns(hs)
table(rownames(res) %in% keys(hs, "ENSEMBL"))
res$symbol <- mapIds(hs, rownames(res), column="SYMBOL", keytype="ENSEMBL")
rownames(res)
install(c("ReportingTools", "Glimma"))
library("ReportingTools")
tmp <- tempdir() # you would instead use a meaningful path here
rep <- HTMLReport(shortName="airway", title="Airway DGE",
basePath=tmp, reportDirectory="report")
publish(res, rep, dds, n=20, make.plots=TRUE, factor=dds$dex)
finish(rep)
setwd("~")
library(shiny); runApp('Code/fastCI/fastCI/inst/extscripts/ci_shiny_app.R')
library(shiny); runApp('ci_shiny_app.R')
runApp('ci_shiny_app.R')
count
plot(count)
dev.new()
plot(count)
plot(count)
text(count)
text(names(count))
text(count, x = names(count))
text(count + .3, x = names(count))
dev.off()
dev.new()
plot(count)
text(count + .3, x = names(count))
count
str(count)
as.numeric(count)
text(as.numeric(count) + .3, x = names(count))
text(as.character(count), x = names(count))
text(as.character(count), x = names(count), y = count)
text(as.character(count), x = names(count), y = count + .3)
plot(count, ylim=c(0,max(count)+1))
text(as.character(count), x = names(count), y = count + .3)
runApp('ci_shiny_app.R')
6/.3
.3/6
6/20
runApp('ci_shiny_app.R')
1^0
runApp('ci_shiny_app.R')
?matplot
citation("DESeq2")
