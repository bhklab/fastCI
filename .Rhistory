KL.analytic <- numeric(num.convs)
KL.refit <- numeric(num.convs)
test1 <- nullCIDist(each.n, 1, cumulative = 0, force_sym = 1)
tt1 <- computeExpectedApproximation(each.n)
tt2 <- computeExpectedApproximation(each.n)
for(i in seq_len(num.convs)){
test1 <- convolve(test1, nullCIDist(each.n, 1, cumulative = 0, force_sym = 1), type = 'o')
tt1[1] <- tt1[1] + tt2[1]
tt1[2] <- sqrt(tt1[2]^2 + tt2[2]^2)
dist <- dnorm(seq_along(test1)-1, tt1[1], tt1[2])
pp <- naive_approximate_normal_from_density(test1)
pp.dist <- dnorm(seq_along(test1)-1, pp[1], pp[2])
KL.analytic[i] <- KL.plugin(test1, dist)
KL.refit[i] <- KL.plugin(test1, pp.dist)
}
plot(KL.analytic, col="blue")
points(KL.refit, col="red")
plot(KL.refit - KL.analytic)
plot(KL.analytic, col="blue")
?reduce
load("~/Desktop/ciResTest.Rda")
dim(res)
apply(res, c(1,3), dim)
apply(res, c(1,3), dim)[1:2,1:2]
apply(res, c(1,3), dim)[1:2,1:2.1]
apply(res, c(1,3), dim)[1:2,1:2,1]
dim(Res)
dim(rses)
dim(res)
test <- res[1,,1,]
dim(test)
test[1,[]]
test[1,
]
test[1,]
test[2,]
?sum
sum(test[2,])
source('~/Code/fastCI/combineCI.R')
source('~/Code/fastCI/makeNullTable.R')
combineCI.2 <- function(x){
total.N <- sum(x[2,], na.rm = TRUE)
if(total.N >= 100){
} else {
nullTable <- makeTableUpToN(max(x[2,], na.rm = TRUE))
vec1 <= x[,1]
x <- x[,-1, drop=FALSE]
nullOut <- nullTable[[vec1[2]]]
conc.out <- vec1[1]*choose(vec1[2], 2)
CI.out <- vec1[1]
while(NCOL(x)){
vec1 <= x[,1]
nullOut <- convolve(nullOut, nullTable[[vec1[2]]], type='o')
total.in <- conc.out/CI.out
CI.out <- (conc.out + vec1[1]*choose(vec1[2],2)) / (total.in + choose(vec1[2],2))
conc.out <- conc.out + vec1[1]*choose(vec1[2], 2)
x <- x[,-1, drop=FALSE]
}
}
return(CI.out)
}
test
test2 <- test[,1:10]
sum(test2[2,])
test2 <- test[,1:5]
sum(test2[2,])
test2 <- test[,1:4]
sum(test2[2,])
test2 <- test[,1:2]
sum(test2[2,])
test2 <- test[,1:3]
sum(test2[2,])
combineCI.2(test2)
debud(combineCI.2())
debud(combineCI.2
)
debug(combineCI.2)
combineCI.2(test2)
combineCI.2 <- function(x){
total.N <- sum(x[2,], na.rm = TRUE)
if(total.N >= 100){
} else {
nullTable <- makeTableUpToN(max(x[2,], na.rm = TRUE))
vec1 <- x[,1]
x <- x[,-1, drop=FALSE]
nullOut <- nullTable[[vec1[2]]]
conc.out <- vec1[1]*choose(vec1[2], 2)
CI.out <- vec1[1]
while(NCOL(x)){
vec1 <= x[,1]
nullOut <- convolve(nullOut, nullTable[[vec1[2]]], type='o')
total.in <- conc.out/CI.out
CI.out <- (conc.out + vec1[1]*choose(vec1[2],2)) / (total.in + choose(vec1[2],2))
conc.out <- conc.out + vec1[1]*choose(vec1[2], 2)
x <- x[,-1, drop=FALSE]
}
}
return(CI.out)
}
combineCI.2(test2)
debug(combineCI.2)
combineCI.2(test2)
x
NCOL(x)
total.in
conc.out
CI.out
combineCI.2 <- function(x){
total.N <- sum(x[2,], na.rm = TRUE)
if(total.N >= 100){
} else {
nullTable <- makeTableUpToN(max(x[2,], na.rm = TRUE))
vec1 <- x[,1]
x <- x[,-1, drop=FALSE]
nullOut <- nullTable[[vec1[2]]]
conc.out <- vec1[1]*choose(vec1[2], 2)
total.out <- choose(vec1[2], 2)
CI.out <- vec1[1]
while(NCOL(x)){
vec1 <= x[,1]
nullOut <- convolve(nullOut, nullTable[[vec1[2]]], type='o')
total.out <- total.out + choose(vec1[2],2)
CI.out <- (conc.out + vec1[1]*choose(vec1[2],2)) / (total.out + choose(vec1[2],2))
conc.out <- conc.out + vec1[1]*choose(vec1[2], 2)
x <- x[,-1, drop=FALSE]
}
}
return(CI.out)
}
debug(combineCI.2)
combineCI.2(test2)
combineCI.2(test2)
total.out
total.out
CI.out
vec1[1]
x
combineCI.2 <- function(x){
total.N <- sum(x[2,], na.rm = TRUE)
if(total.N >= 100){
} else {
nullTable <- makeTableUpToN(max(x[2,], na.rm = TRUE))
vec1 <- x[,1]
x <- x[,-1, drop=FALSE]
nullOut <- nullTable[[vec1[2]]]
conc.out <- vec1[1]*choose(vec1[2], 2)
total.out <- choose(vec1[2], 2)
CI.out <- vec1[1]
while(NCOL(x)){
vec1 <- x[,1]
nullOut <- convolve(nullOut, nullTable[[vec1[2]]], type='o')
total.out <- total.out + choose(vec1[2],2)
CI.out <- (conc.out + vec1[1]*choose(vec1[2],2)) / (total.out + choose(vec1[2],2))
conc.out <- conc.out + vec1[1]*choose(vec1[2], 2)
x <- x[,-1, drop=FALSE]
}
}
return(CI.out)
}
combineCI.2(test2)
combineCI.2 <- function(x){
total.N <- sum(x[2,], na.rm = TRUE)
if(total.N >= 100){
} else {
nullTable <- makeTableUpToN(max(x[2,], na.rm = TRUE))
vec1 <- x[,1]
x <- x[,-1, drop=FALSE]
nullOut <- nullTable[[vec1[2]]]
conc.out <- vec1[1]*choose(vec1[2], 2)
total.out <- choose(vec1[2], 2)
CI.out <- vec1[1]
while(NCOL(x)){
vec1 <- x[,1]
nullOut <- convolve(nullOut, nullTable[[vec1[2]]], type='o')
total.out <- total.out + choose(vec1[2],2)
CI.out <- (conc.out + vec1[1]*choose(vec1[2],2)) / (total.out + choose(vec1[2],2))
conc.out <- conc.out + vec1[1]*choose(vec1[2], 2)
x <- x[,-1, drop=FALSE]
}
p.out <- getCIPvals(cumsum(nullOut), total.out - conc.out)
}
return(c("CI" = CI.out, "p" = p.out))
}
combineCI.2(test2)
debug(combineCI.2)
combineCI.2(test2)
total.out
conc.out
p.out <- getCIPvals(cumsum(nullOut), total.out - conc.out)
p.out
nullOut
cumsum(nullOut)
source('~/Code/fastCI/makeNullTable.R')
source('~/Code/fastCI/makeNullTable.R')
combineCI.2 <- function(x){
total.N <- sum(x[2,], na.rm = TRUE)
if(total.N >= 100){
} else {
nullTable <- makeTableUpToN(max(x[2,], na.rm = TRUE))
vec1 <- x[,1]
x <- x[,-1, drop=FALSE]
nullOut <- nullTable[[vec1[2]]]
conc.out <- vec1[1]*choose(vec1[2], 2)
total.out <- choose(vec1[2], 2)
CI.out <- vec1[1]
while(NCOL(x)){
vec1 <- x[,1]
nullOut <- convolve(nullOut, nullTable[[vec1[2]]], type='o')
total.out <- total.out + choose(vec1[2],2)
CI.out <- (conc.out + vec1[1]*choose(vec1[2],2)) / (total.out + choose(vec1[2],2))
conc.out <- conc.out + vec1[1]*choose(vec1[2], 2)
x <- x[,-1, drop=FALSE]
}
p.out <- getCIPvals(cumsum(nullOut), total.out - conc.out)
}
return(c("CI" = CI.out, "p" = p.out))
}
combineCI.2(test2)
combineCI.2 <- function(x){
total.N <- sum(x[2,], na.rm = TRUE)
if(total.N >= 100){
} else {
nullTable <- makeTableUpToN(max(x[2,], na.rm = TRUE))
vec1 <- x[,1]
x <- x[,-1, drop=FALSE]
nullOut <- nullTable[[vec1[2]]]
conc.out <- vec1[1]*choose(vec1[2], 2)
total.out <- choose(vec1[2], 2)
CI.out <- vec1[1]
while(NCOL(x)){
vec1 <- x[,1]
nullOut <- convolve(nullOut, nullTable[[vec1[2]]], type='o')
total.out <- total.out + choose(vec1[2],2)
CI.out <- (conc.out + vec1[1]*choose(vec1[2],2)) / (total.out + choose(vec1[2],2))
conc.out <- conc.out + vec1[1]*choose(vec1[2], 2)
x <- x[,-1, drop=FALSE]
}
p.out <- getCIPvals(cumsum(nullOut), total.out - conc.out)
}
return(c("CI" = CI.out[[1]], "p" = p.out[[1]]))
}
combineCI.2(test2)
?complete.cases
?complete.cases
complete.cases()
complete.cases
complete.cases(test2)
test2
test
complete.cases(test)
complete.cases(t(test)
)
complete.cases(t(test))
combineCI.2 <- function(x){
x <- x[,complete.cases(t(x))]
total.N <- sum(x[2,])
if(total.N >= 100){
stop("not implemented")
} else {
nullTable <- makeTableUpToN(max(x[2,]))
vec1 <- x[,1]
x <- x[,-1, drop=FALSE]
nullOut <- nullTable[[vec1[2]]]
conc.out <- vec1[1]*choose(vec1[2], 2)
total.out <- choose(vec1[2], 2)
CI.out <- vec1[1]
while(NCOL(x)){
vec1 <- x[,1]
nullOut <- convolve(nullOut, nullTable[[vec1[2]]], type='o')
total.out <- total.out + choose(vec1[2],2)
CI.out <- (conc.out + vec1[1]*choose(vec1[2],2)) / (total.out + choose(vec1[2],2))
conc.out <- conc.out + vec1[1]*choose(vec1[2], 2)
x <- x[,-1, drop=FALSE]
}
p.out <- getCIPvals(cumsum(nullOut), total.out - conc.out)
}
return(c("CI" = CI.out[[1]], "p" = p.out[[1]]))
}
complete.cases(test)
combineCI.2(test)
computeExpectedApproximation <- function(N){
mean <- choose(N, 2)/2
var <- sqrt((2*N^3 + 3*N^2 - 5*N)/72)
return(c("mean" = mean, "var"=var))
}
?p.out
?pnorm
qnorm(1)
pnorm(1)
pnorm(1, lower.tail = FALSE)
combineCI.2 <- function(x){
x <- x[,complete.cases(t(x))]
total.N <- sum(x[2,])
if(total.N >= 1){
vec1 <- x[,1]
total.out <- choose(vec1[2], 2)
conc.out <- vec1[1] * total.out
pars.out <- computeExpectedApproximation(total.out)
while(NCOL(x)){
vec1 <- x[,1]
pars.new <- computeExpectedApproximation(choose(vec1[2], 2))
pars.out[1] <- pars.out[1] + pars.new[1]
pars.out[2] <- sqrt(pars.out[2]^2 + pars.new[2]^2)
conc.out <- conc.out + vec1[1]*choose(vec1[2], 2)
total.out <- total.out + choose(vec1[2], 2)
x <- x[,-1, drop=FALSE]
}
if(conc.out < pars.out[1]){
prob <- pnorm(conc.out + 1,mean = pars.out[1], sd = pars.out[2])
p.out <- 2*prob
} else {
prob <- pnorm(conc.out - 1,mean = pars.out[1], sd = pars.out[2], lower.tail = FALSE)
p.out <- 2*prob
}
CI.out <- conc.out/total.out
} else {
nullTable <- makeTableUpToN(max(x[2,]))
vec1 <- x[,1]
x <- x[,-1, drop=FALSE]
nullOut <- nullTable[[vec1[2]]]
conc.out <- vec1[1]*choose(vec1[2], 2)
total.out <- choose(vec1[2], 2)
CI.out <- vec1[1]
while(NCOL(x)){
vec1 <- x[,1]
nullOut <- convolve(nullOut, nullTable[[vec1[2]]], type='o')
total.out <- total.out + choose(vec1[2],2)
CI.out <- (conc.out + vec1[1]*choose(vec1[2],2)) / (total.out + choose(vec1[2],2))
conc.out <- conc.out + vec1[1]*choose(vec1[2], 2)
x <- x[,-1, drop=FALSE]
}
p.out <- getCIPvals(cumsum(nullOut), total.out - conc.out)
}
return(c("CI" = CI.out[[1]], "p" = p.out[[1]]))
}
combineCI.2(test2)
test2
combineCI.2(test1)
combineCI.2(test)
combineCI.2(test2)
combineCI.2 <- function(x){
x <- x[,complete.cases(t(x))]
total.N <- sum(x[2,])
if(total.N >= 100){
vec1 <- x[,1]
total.out <- choose(vec1[2], 2)
conc.out <- vec1[1] * total.out
pars.out <- computeExpectedApproximation(total.out)
while(NCOL(x)){
vec1 <- x[,1]
pars.new <- computeExpectedApproximation(choose(vec1[2], 2))
pars.out[1] <- pars.out[1] + pars.new[1]
pars.out[2] <- sqrt(pars.out[2]^2 + pars.new[2]^2)
conc.out <- conc.out + vec1[1]*choose(vec1[2], 2)
total.out <- total.out + choose(vec1[2], 2)
x <- x[,-1, drop=FALSE]
}
if(conc.out < pars.out[1]){
prob <- pnorm(conc.out + 1,mean = pars.out[1], sd = pars.out[2])
p.out <- 2*prob
} else {
prob <- pnorm(conc.out - 1,mean = pars.out[1], sd = pars.out[2], lower.tail = FALSE)
p.out <- 2*prob
}
CI.out <- conc.out/total.out
} else {
nullTable <- makeTableUpToN(max(x[2,]))
vec1 <- x[,1]
x <- x[,-1, drop=FALSE]
nullOut <- nullTable[[vec1[2]]]
conc.out <- vec1[1]*choose(vec1[2], 2)
total.out <- choose(vec1[2], 2)
CI.out <- vec1[1]
while(NCOL(x)){
vec1 <- x[,1]
nullOut <- convolve(nullOut, nullTable[[vec1[2]]], type='o')
total.out <- total.out + choose(vec1[2],2)
CI.out <- (conc.out + vec1[1]*choose(vec1[2],2)) / (total.out + choose(vec1[2],2))
conc.out <- conc.out + vec1[1]*choose(vec1[2], 2)
x <- x[,-1, drop=FALSE]
}
p.out <- getCIPvals(cumsum(nullOut), total.out - conc.out)
}
return(c("CI" = CI.out[[1]], "p" = p.out[[1]]))
}
combineCI.2(test2)
combineCI.2 <- function(x){
x <- x[,complete.cases(t(x))]
total.N <- sum(x[2,])
if(total.N >= 1){
vec1 <- x[,1]
total.out <- choose(vec1[2], 2)
conc.out <- vec1[1] * total.out
pars.out <- computeExpectedApproximation(total.out)
while(NCOL(x)){
vec1 <- x[,1]
pars.new <- computeExpectedApproximation(choose(vec1[2], 2))
pars.out[1] <- pars.out[1] + pars.new[1]
pars.out[2] <- sqrt(pars.out[2]^2 + pars.new[2]^2)
conc.out <- conc.out + vec1[1]*choose(vec1[2], 2)
total.out <- total.out + choose(vec1[2], 2)
x <- x[,-1, drop=FALSE]
}
if(conc.out < pars.out[1]){
prob <- pnorm(conc.out + 1,mean = pars.out[1], sd = pars.out[2])
p.out <- 2*prob
} else {
prob <- pnorm(conc.out - 1,mean = pars.out[1], sd = pars.out[2], lower.tail = FALSE)
p.out <- 2*prob
}
CI.out <- conc.out/total.out
} else {
nullTable <- makeTableUpToN(max(x[2,]))
vec1 <- x[,1]
x <- x[,-1, drop=FALSE]
nullOut <- nullTable[[vec1[2]]]
conc.out <- vec1[1]*choose(vec1[2], 2)
total.out <- choose(vec1[2], 2)
CI.out <- vec1[1]
while(NCOL(x)){
vec1 <- x[,1]
nullOut <- convolve(nullOut, nullTable[[vec1[2]]], type='o')
total.out <- total.out + choose(vec1[2],2)
CI.out <- (conc.out + vec1[1]*choose(vec1[2],2)) / (total.out + choose(vec1[2],2))
conc.out <- conc.out + vec1[1]*choose(vec1[2], 2)
x <- x[,-1, drop=FALSE]
}
p.out <- getCIPvals(cumsum(nullOut), total.out - conc.out)
}
return(c("CI" = CI.out[[1]], "p" = p.out[[1]]))
}
debug(combineCI.2)
combineCI.2(test2)
total.out
conc.out
vec1
source('~/Code/fastCI/combineCI.R')
combineCI.2(test2)
debug(combineCI.2)
combineCI.2(test2)
pars.out
pars.new
vec1
source('~/Code/fastCI/combineCI.R')
combineCI.2(test2)
debug(combineCI.2)
combineCI.2(test2)
conc.out
total.out
vec1
choose(17,2)
choose(17,2)*0.51
conc.out
total.out
conc.out
p.out
CI.out
source('~/Code/fastCI/combineCI.R')
debug(combineCI.2)
combineCI.2(test2)
getCIPvals()
CI.out
total.out
conc.out
source('~/Code/fastCI/combineCI.R')
combineCI.2(test2)
combineCI.2(test2)
combineCI.2(test)
test <- apply(res, c(1,3), combineCI.2)
test
erbb2 <- "ENSG00000141736"
egfr <- "ENSG00000146648"
test[,,egfr]
dim(test)
library(abind)
test
dim(test)
str(p.adjust(test[1,,], method = "fdr"))
adjusted.p <- p.adjust(test[1,,], method = "fdr")
dim(adjusted.p) <- c(24, 19961)
test <- abind(test, adjusted.p, along = 1)
dim(test)
adjusted.p <- p.adjust(test[2,,], method = "fdr")
dim(adjusted.p) <- c(24, 19961)
test <- abind(test[1:2,,], adjusted.p, along = 1)
dim(test)
cor(as.vector(test[2,,], test[3,,]))
cor(as.vector(test[2,,]), as.vector(test[3,,])))
cor(as.vector(test[2,,]), as.vector(test[3,,]))
test[,,egfr]
test[,,erbb2]
nqo1 <- "ENSG00000181019"
test[,,nqo1]
test[c("lapatinib", "Erlotinib"),,c(erbb2, egfr)]
test[,c("lapatinib", "Erlotinib"),c(erbb2, egfr)]
read.csv("/Users/psmirnov/Documents/known_biomarkers.csv")
known.biomarkers <- read.csv("/Users/psmirnov/Documents/known_biomarkers.csv")
save(known.biomarkers, file="known_biomarkers.Rda")
setwd("~/Code/fastCI/")
library(devtools)
?devtools::as.package()
package.skeleton(name = "fastCI")
list.files()
package.skeleton(name = "fastCI")
load_all("fastCI/")
load_all("fastCI/")
fastCI(rnorm(10000), rnorm(10000))
fastCI(rnorm(10000), runif(10000))
fastCI(rnorm(100000), runif(100000))
fastCI(rnorm(1000000), runif(1000000))
justFastCI(rnorm(1000000), runif(1000000))
justFastCI(rnorm(10000000), runif(10000000))
